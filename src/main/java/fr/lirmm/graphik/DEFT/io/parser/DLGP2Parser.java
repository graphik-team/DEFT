/* Generated By:JavaCC: Do not edit this line. DLGP2Parser.java */
package fr.lirmm.graphik.DEFT.io.parser;
import java.io.Reader;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.event.EventListenerList;

public class DLGP2Parser implements DLGP2ParserConstants {
  public static final String XSD="http://www.w3.org/2001/XMLSchema#";
  public static final String RDF="http://www.w3.org/1999/02/22-rdf-syntax-ns#";
  public static String DEFAULT_BASE="http://www.lirmm.fr/dlgp/";
  protected boolean una=false;
  protected String top=null;
  protected ParserListener.OBJECT_TYPE current_object = ParserListener.OBJECT_TYPE.UNKNOWN,
  declared_object = ParserListener.OBJECT_TYPE.UNKNOWN;
  private PrefixManager prefixManager=new PrefixManager(DEFAULT_BASE);
  protected ArrayList<String> directives=new ArrayList<String>();
  /** The listener list. */
  protected EventListenerList parserListenerList = new EventListenerList();
  protected TermFactory termFactory;


  public DLGP2Parser(TermFactory termFactory, java.io.InputStream stream)
  {
    this (stream);
    this.termFactory = termFactory;
  }

  public DLGP2Parser(TermFactory termFactory, java.io.InputStream stream, String encoding)
  {
    this (stream, encoding);
    this.termFactory = termFactory;
  }

  public DLGP2Parser(TermFactory termFactory, Reader reader)
  {
    this (reader);
    this.termFactory = termFactory;
  }
  public void fireDirective(String text)
  {
        fireParseEvent(new DirectiveEvent(text));
  }
  /**
	 * Adds the parser listener.
	 * 
	 * @param l the listener
	 */
  public void addParserListener(ParserListener l)
  {
    parserListenerList.add(ParserListener.class, l);
  }

  protected Object getIRIFromQName(String qname) throws ParseException
  {
        int colonIndex = qname.indexOf(':');
        if(colonIndex == -1) {
            throw new ParseException("Not a valid qname (missing ':') " + qname);
        }
        String prefix = qname.substring(0, colonIndex + 1);
        if(!prefixManager.containsPrefix(prefix)) {
            throw new ParseException("Prefix not declared: " + prefix);
        }
        return getIRI(prefixManager.getIRI(prefix)+qname.substring(colonIndex+1));
    }
   protected boolean isAbsolute(String s) {
        int colonIndex = s.indexOf(':');
        if (colonIndex == -1) return false;
        else for (int i = 0; i < colonIndex; i++)
        {
            char ch = s.charAt(i);
            if (!Character.isLetterOrDigit(ch) && ch != '.'
                    && ch != '+' && ch != '-')  return false;
        }
        return true;
    }

 protected Object getIRI(String s) {
         if(s.charAt(0) == '<') {
            s = s.substring(1, s.length() - 1);
            if(!isAbsolute(s)) s=prefixManager.getDefault()+s;
        }
         Object iri = termFactory.createIRI(s);
         return iri;
    }
   public static String unescapeString(String s) {
        if (s.indexOf('\u005c\u005c') == -1) {
            return s;
        }
        StringBuilder sb = new StringBuilder(s.length());
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            if (ch == '\u005c\u005c') {
                int j = i + 1;
                if (j < s.length()) {
                    char escCh = s.charAt(j);
                    if (escCh == '\u005c\u005c' || escCh == '\u005c"') {
                        i++;
                        sb.append(escCh);
                    }
                } else {
                    sb.append('\u005c\u005c');
                }
            } else {
                sb.append(ch);
            }
        }
        return sb.toString();
    }

  /**
	 * Removes the parser listener.
	 * 
	 * @param l the listener
	 */
  public void removeParserListener(ParserListener l)
  {
    parserListenerList.remove(ParserListener.class, l);
  }

  /**
	 * Gets the parser listeners.
	 * 
	 * @return the parser listeners
	 */
  public ParserListener [] getParserListeners()
  {
    return (ParserListener []) parserListenerList
    .getListeners(ParserListener.class);
  }

  protected void fireParseEvent(ParseEvent event)
  {
    // Guaranteed to return a non-null array
    Object [] listeners = parserListenerList.getListenerList();
    // Process the listeners last to first, notifying
    // those that are interested in this event
    for (int i = listeners.length - 2; i >= 0; i -= 2)
    {
      if (listeners [i] == ParserListener.class)
      {
        ParserListener pListener = (ParserListener) listeners [i + 1];
        event.fire(pListener);
      }
    }
  }
  class DirectiveEvent implements ParseEvent
  {
    String text;
    DirectiveEvent(String txt)
    {
      this.text = txt;
    }
    public void fire(ParserListener listener)
    {
      listener.directive(text);
    }

  }
  class DeclarePrefixEvent implements ParseEvent
  {
    String prefix;
    String ns;
        DeclarePrefixEvent(String prefix,String ns)
        {
          this.prefix=prefix;
          this.ns=ns;
        }
    public void fire(ParserListener listener)
    {
      listener.declarePrefix(prefix, ns);
    }
  }
  class DeclareTopEvent implements ParseEvent
  {
    String top;
        DeclareTopEvent(String top)
        {
          this.top=top;
        }
    public void fire(ParserListener listener)
    {
      listener.declareTop(top);
    }
  }
  class DeclareBaseEvent implements ParseEvent
  {
    String base;
        DeclareBaseEvent(String base)
        {
          this.base=base;
        }
    public void fire(ParserListener listener)
    {
      listener.declareBase(base);
    }
  }
  class DeclareUNAEvent implements ParseEvent
  {
        DeclareUNAEvent()
        {
        }
    public void fire(ParserListener listener)
    {
      listener.declareUNA();
    }
  }
  class StartsObjectEvent implements ParseEvent
  {
    ParserListener.OBJECT_TYPE objectType = null;
    String name;
    StartsObjectEvent(ParserListener.OBJECT_TYPE objectType, String name)
    {
      this.objectType = objectType;
      this.name = name;
    }

    public void fire(ParserListener listener)
    {
      listener.startsObject(objectType, name);
    }
  }

  class ConjunctionEndsEvent implements ParseEvent
  {
    ParserListener.OBJECT_TYPE objectType = null;
    ConjunctionEndsEvent(ParserListener.OBJECT_TYPE objectType)
    {
      this.objectType = objectType;
    }

    public void fire(ParserListener listener)
    {
      listener.endsConjunction(objectType);
    }
  }

  class FindsAtomEvent implements ParseEvent
  {
    Object predicate = null;
    Object [] terms = null;
    FindsAtomEvent(Object predicate, Object [] terms)
    {
      this.predicate = predicate;
      this.terms = terms;
    }

    public void fire(ParserListener listener)
    {
      listener.createsAtom(predicate, terms);
    }
  }

  class FindsEqualityEvent implements ParseEvent
  {
    Object term1 = null, term2 = null;
    FindsEqualityEvent(Object term1, Object term2)
    {
      this.term1 = term1;
      this.term2 = term2;
    }

    public void fire(ParserListener listener)
    {
      listener.createsEquality(term1, term2);
    }
  }

  class FindsVarListEvent implements ParseEvent
  {
    Object [] varList = null;
    FindsVarListEvent(Object [] varList)
    {
      this.varList = varList;
    }

    public void fire(ParserListener listener)
    {
      listener.answerTermList(varList);
    }
  }

  class FindsPreferenceEvent implements ParseEvent
  {
    String prefLabel1 = null;
    String prefLabel2 = null;
    FindsPreferenceEvent(String prefLabel1, String prefLabel2)
    {
      this.prefLabel1 = prefLabel1;
      this.prefLabel2 = prefLabel2;
    }

    public void fire(ParserListener listener)
    {
      listener.createsPreference(prefLabel1, prefLabel2);
    }
  }

  interface ParseEvent
  {
    void fire(ParserListener listener);
  }
  public void setDefaultBase(String defaultBase)
  {
        prefixManager.setDefault(defaultBase);
  }
protected class PrefixManager {
        protected String defaultPrefix;
        protected HashMap<String,Object> prefixTable=new HashMap<String,Object>();
        public PrefixManager(String defaultPrefix)
        {
                setDefault(defaultPrefix);
        }
        public String getDefault()
        {
                return defaultPrefix;
        }
        public void setDefault(String defaultPrefix)
        {
                this.defaultPrefix=defaultPrefix;
        }
        public Object getIRI(String qname)
        {
                return prefixTable.get(qname);
        }
        public boolean containsPrefix(String prefix)
        {
                return prefixTable.containsKey(prefix);
        }
        public void setPrefix(String prefix,Object iri)
        {
                prefixTable.put(prefix,iri);
        }
}

  final public void document() throws ParseException {
int nb_statement=0;
    header();
    body();
    jj_consume_token(0);
  }

  final public void header() throws ParseException {
    if (jj_2_1(2)) {
      parseBaseDecl();
    } else {
      ;
    }
    label_1:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_1;
      }
      parsePrefixDecl();
    }
    if (jj_2_3(2)) {
      parseTopDecl();
    } else {
      ;
    }
    if (jj_2_4(2)) {
      parseUNADecl();
    } else {
      ;
    }
  }

  final public Object parseResource() throws ParseException {
    Object iri;
    if (jj_2_5(2)) {
      iri = parseIRI();
    } else if (jj_2_6(2)) {
      iri = parseAbbreviatedIRI();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return iri;}
    throw new Error("Missing return statement in function");
  }

  final public Object parseAbbreviatedIRI() throws ParseException {
    Token t;
    t = jj_consume_token(PNAME_LN);
        {if (true) return getIRIFromQName(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Object parseIRI() throws ParseException {
    Token t;
    t = jj_consume_token(FULLIRI);
                 {if (true) return getIRI(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public void parsePrefixDecl() throws ParseException {
    Token t;
    String prefix = "";
    Object ns;
    jj_consume_token(PREFIX);
    t = jj_consume_token(PNAME_NS);
                          prefix=t.image;
    ns = parseIRI();
        String s=ns.toString();
        if(s.startsWith("<"))
                        s=s.substring(1,s.length()-1);
        prefixManager.setPrefix(prefix, s);
        fireParseEvent(new DeclarePrefixEvent(prefix, s));
  }

  final public void parseBaseDecl() throws ParseException {
    String base;
    Token t;
    jj_consume_token(BASE);
    t = jj_consume_token(FULLIRI);
                        base = t.image.substring(1, t.image.length() - 1);
        prefixManager.setDefault(base);
        fireParseEvent(new DeclareBaseEvent(base));
  }

  final public void parseTopDecl() throws ParseException {
    String topString;
    Token t;
    if (jj_2_7(2)) {
      jj_consume_token(TOP);
      t = jj_consume_token(FULLIRI);
                topString = t.image.substring(1, t.image.length() - 1);
                fireParseEvent(new DeclareTopEvent(topString));
    } else if (jj_2_8(2)) {
      jj_consume_token(TOP);
      t = jj_consume_token(L_IDENT);
                topString=prefixManager.getDefault()+t.image;
                fireParseEvent(new DeclareTopEvent(topString));
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parseUNADecl() throws ParseException {
    jj_consume_token(UNA);
        una=true;
        fireParseEvent(new DeclareUNAEvent());
  }

  final public void body() throws ParseException {
    if (jj_2_13(2)) {
      if (jj_2_11(2)) {
        label_2:
        while (true) {
          statement();
       current_object = ParserListener.OBJECT_TYPE.UNKNOWN;
          if (jj_2_9(2)) {
            ;
          } else {
            break label_2;
          }
        }
      } else if (jj_2_12(2)) {
        label_3:
        while (true) {
          section();
          if (jj_2_10(2)) {
            ;
          } else {
            break label_3;
          }
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
  }

  final public void section() throws ParseException {
    if (jj_2_14(2)) {
      jj_consume_token(SECTION_FACTS);
                declared_object = ParserListener.OBJECT_TYPE.FACT;
    } else if (jj_2_15(2)) {
      jj_consume_token(SECTION_RULES);
                declared_object = ParserListener.OBJECT_TYPE.RULE;
    } else if (jj_2_16(2)) {
      jj_consume_token(SECTION_CONSTRAINTS);
                declared_object = ParserListener.OBJECT_TYPE.NEG_CONSTRAINT;
    } else if (jj_2_17(2)) {
      jj_consume_token(SECTION_QUERIES);
                declared_object = ParserListener.OBJECT_TYPE.QUERY;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_4:
    while (true) {
      if (jj_2_18(2)) {
        ;
      } else {
        break label_4;
      }
      statement();
       current_object = ParserListener.OBJECT_TYPE.UNKNOWN;
    }
  }

/**
* Parse the name of the new object
* all OBJECT_TYPE can optionally be named
*
**/
  final public String statement_name() throws ParseException {
    jj_consume_token(NAME_OBJECT);
    {if (true) return token.image.substring(1,token.image.length()-1);}
    throw new Error("Missing return statement in function");
  }

/**
*	this method parses a list of atoms
*   and optionally return a list of pending
*   actions when OBJECT_TYPE is UNKNOWN
**/
  final public ArrayList < ParseEvent > conjunction(String name) throws ParseException {
  ArrayList < ParseEvent > pending_events = null;
  ParseEvent event;
  if (current_object == ParserListener.OBJECT_TYPE.UNKNOWN)
        {
          if(declared_object!=ParserListener.OBJECT_TYPE.UNKNOWN)
          {
                current_object=declared_object;
                fireParseEvent(new StartsObjectEvent(current_object, name));
          }
          else pending_events = new ArrayList < ParseEvent > ();
        }
    event = atom();
    if(pending_events==null) fireParseEvent(event);
    else pending_events.add(event);
    label_5:
    while (true) {
      if (jj_2_19(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(COMMA);
      event = atom();
    if(pending_events==null) fireParseEvent(event);
    else pending_events.add(event);
    }
    {if (true) return pending_events;}
    throw new Error("Missing return statement in function");
  }

  final public void statement() throws ParseException {
  String name = null;
  String prefLabel1 = null;
  String prefLabel2 = null;
  ArrayList < ParseEvent > pending_events = null;
    if (jj_2_20(2)) {
      name = statement_name();
    } else {
      ;
    }
    if (jj_2_23(2)) {
      if (jj_2_21(2)) {
        prefLabel1 = statement_name();
      } else {
        ;
      }
      jj_consume_token(56);
                current_object = ParserListener.OBJECT_TYPE.PREFERENCE;
                if(prefLabel1==null) { prefLabel1 = name; }
      prefLabel2 = statement_name();
      jj_consume_token(DOT);
                fireParseEvent(new FindsPreferenceEvent(prefLabel1, prefLabel2));
                {if (true) return;}
    } else if (jj_2_24(2)) {
      jj_consume_token(57);
          // begin query
          current_object = ParserListener.OBJECT_TYPE.QUERY;
          fireParseEvent(new StartsObjectEvent(ParserListener.OBJECT_TYPE.QUERY, name));
      if (jj_2_22(2)) {
        jj_consume_token(OPENPAR);
        var_list();
        jj_consume_token(CLOSEPAR);
      } else {
        ;
      }
      jj_consume_token(58);
      conjunction(null);
      jj_consume_token(DOT);
          fireParseEvent(new ConjunctionEndsEvent(ParserListener.OBJECT_TYPE.QUERY));
          {if (true) return;}
    } else if (jj_2_25(2)) {
      jj_consume_token(59);
      jj_consume_token(58);
          // begin negative constraint
          current_object = ParserListener.OBJECT_TYPE.NEG_CONSTRAINT;
          fireParseEvent(new StartsObjectEvent(ParserListener.OBJECT_TYPE.NEG_CONSTRAINT, name));
      conjunction(null);
      jj_consume_token(DOT);
          fireParseEvent(new ConjunctionEndsEvent(ParserListener.OBJECT_TYPE.NEG_CONSTRAINT));
          {if (true) return;}
    } else if (jj_2_26(2)) {
      pending_events = conjunction(name);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_27(2)) {
      jj_consume_token(DOT);
        current_object = ParserListener.OBJECT_TYPE.FACT;
        if (pending_events != null)
        {
          // call listeners for all pending atoms
          fireParseEvent(new StartsObjectEvent(ParserListener.OBJECT_TYPE.FACT, name));
          for (ParseEvent pending_event : pending_events) fireParseEvent(pending_event);
        }
        fireParseEvent(new ConjunctionEndsEvent(ParserListener.OBJECT_TYPE.FACT));
        {if (true) return;}
    } else if (jj_2_28(2)) {
      jj_consume_token(58);
          current_object = ParserListener.OBJECT_TYPE.RULE;
          if (pending_events != null)
          {
            // call listeners for all pending atoms
            fireParseEvent(new StartsObjectEvent(ParserListener.OBJECT_TYPE.RULE, name));
            for (ParseEvent pending_event : pending_events) fireParseEvent(pending_event);
          }
          fireParseEvent(new ConjunctionEndsEvent(ParserListener.OBJECT_TYPE.RULE));
      conjunction(null);
      jj_consume_token(DOT);
          fireParseEvent(new ConjunctionEndsEvent(ParserListener.OBJECT_TYPE.RULE));
          {if (true) return;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Object parseLiteral() throws ParseException {
        Object literal;
     String qs;
    String lang = null;
    Object datatype = null;
    Token t;
    if (jj_2_32(2)) {
      qs = parseQuotedString();
      if (jj_2_31(2)) {
        if (jj_2_29(2)) {
          t = jj_consume_token(LANG);
                                          lang=t.image;
        } else if (jj_2_30(2)) {
          jj_consume_token(DOUBLE_CARET);
          datatype = parseResource();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
            if(datatype != null) {
                {if (true) return termFactory.createLiteral(datatype,qs,null);}
            }
            else if(lang != null) {
                Object stringIRI=termFactory.createIRI(RDF+"langString");
                {if (true) return termFactory.createLiteral(stringIRI,qs,lang.substring(1));}
            }
            else {
                Object stringIRI=termFactory.createIRI(XSD+"string");
                {if (true) return termFactory.createLiteral(stringIRI,qs,null);}
            }
    } else if (jj_2_33(2)) {
      literal = parseInteger();
                            {if (true) return literal;}
    } else if (jj_2_34(2)) {
      literal = parseDouble();
                           {if (true) return literal;}
    } else if (jj_2_35(2)) {
      literal = parseDecimal();
                            {if (true) return literal;}
    } else if (jj_2_36(2)) {
      literal = parseBoolean();
                            {if (true) return literal;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object parseInteger() throws ParseException {
    Token t;
    if (jj_2_37(2)) {
      t = jj_consume_token(INTEGER);
            Object integerIRI=termFactory.createIRI(XSD+"integer");
                {if (true) return termFactory.createLiteral(integerIRI,t.image,null);}
    } else if (jj_2_38(2)) {
      t = jj_consume_token(DIGIT);
            Object integerIRI=termFactory.createIRI(XSD+"integer");
                {if (true) return termFactory.createLiteral(integerIRI,t.image,null);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Object parseDouble() throws ParseException {
    Token t;
    t = jj_consume_token(DOUBLE);
            Object doubleIRI=termFactory.createIRI(XSD+"double");
                {if (true) return termFactory.createLiteral(doubleIRI,t.image,null);}
    throw new Error("Missing return statement in function");
  }

  final public Object parseDecimal() throws ParseException {
    Token t;
    t = jj_consume_token(DECIMAL);
            Object decimalIRI=termFactory.createIRI(XSD+"decimal");
                {if (true) return termFactory.createLiteral(decimalIRI,t.image,null);}
    throw new Error("Missing return statement in function");
  }

  final public Object parseBoolean() throws ParseException {
    Token t;
    if (jj_2_39(2)) {
      t = jj_consume_token(TRUE);
    } else if (jj_2_40(2)) {
      t = jj_consume_token(FALSE);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
            Object boolIRI=termFactory.createIRI(XSD+"boolean");
                {if (true) return termFactory.createLiteral(boolIRI,t.image,null);}
    throw new Error("Missing return statement in function");
  }

  final public String parseQuotedString() throws ParseException {
    String s;
    s = parseString();
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String parseString() throws ParseException {
    Token t;
    String rawString = "";
    if (jj_2_41(2)) {
      t = jj_consume_token(STRING);
        rawString = t.image.substring(1, t.image.length() - 1);
    } else if (jj_2_42(2)) {
      t = jj_consume_token(LONG_STRING);
        rawString = t.image.substring(3, t.image.length() - 3);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return unescapeString(rawString);}
    throw new Error("Missing return statement in function");
  }

  final public void var_list() throws ParseException {
  ArrayList < Object > listVar = new ArrayList < Object > ();
  Object var;
    var = variable();
    listVar.add(var);
    label_6:
    while (true) {
      if (jj_2_43(2)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(COMMA);
      var = variable();
      listVar.add(var);
    }
    fireParseEvent(new FindsVarListEvent(listVar.toArray(new Object [ listVar.size() ])));
  }

  final public Object variable() throws ParseException {
    jj_consume_token(U_IDENT);
    {if (true) return termFactory.createVariable(token.image);}
    throw new Error("Missing return statement in function");
  }

  final public ParseEvent atom() throws ParseException {
  ParseEvent event=null;
    if (jj_2_44(2)) {
      event = std_atom();
    } else if (jj_2_45(2)) {
      event = equality();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return event;}
    throw new Error("Missing return statement in function");
  }

  final public ParseEvent std_atom() throws ParseException {
  Object predicate;
  ArrayList < Object > listTerm = new ArrayList < Object > ();
    if (jj_2_46(2)) {
      jj_consume_token(L_IDENT);
      predicate=termFactory.createIRI(prefixManager.getDefault()+token.image);
    } else if (jj_2_47(2)) {
      predicate = parseResource();

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }

    jj_consume_token(OPENPAR);
    term(listTerm);
    label_7:
    while (true) {
      if (jj_2_48(2)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(COMMA);
      term(listTerm);
    }
    jj_consume_token(CLOSEPAR);
    {if (true) return new FindsAtomEvent(predicate, listTerm.toArray(new Object [ listTerm.size() ]));}
    throw new Error("Missing return statement in function");
  }

  final public ParseEvent equality() throws ParseException {
  ArrayList < Object > listTerm = new ArrayList < Object > ();
    term(listTerm);
    jj_consume_token(60);
    term(listTerm);
    {if (true) return new FindsEqualityEvent(listTerm.get(0), listTerm.get(1));}
    throw new Error("Missing return statement in function");
  }

  final public void term(ArrayList < Object > listTerm) throws ParseException {
  Object lit;
  Object iri;
    if (jj_2_49(2)) {
      jj_consume_token(U_IDENT);
      listTerm.add(termFactory.createVariable(token.image));
    } else if (jj_2_50(2)) {
      jj_consume_token(L_IDENT);
      iri=termFactory.createIRI(prefixManager.getDefault()+token.image);
      listTerm.add(iri);
    } else if (jj_2_51(2)) {
      iri = parseResource();
      listTerm.add(iri);
    } else if (jj_2_52(2)) {
      lit = parseLiteral();
      listTerm.add(lit);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_3_17() {
    if (jj_scan_token(SECTION_QUERIES)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(U_IDENT)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(SECTION_CONSTRAINTS)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(SECTION_RULES)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(SECTION_FACTS)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    if (jj_3_10()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    if (jj_3_9()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(58)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(UNA)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(L_IDENT)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    if (jj_scan_token(OPENPAR)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(TOP)) return true;
    if (jj_scan_token(L_IDENT)) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(TOP)) return true;
    if (jj_scan_token(FULLIRI)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(59)) return true;
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(OPENPAR)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(U_IDENT)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(BASE)) return true;
    if (jj_scan_token(FULLIRI)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(57)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(PREFIX)) return true;
    if (jj_scan_token(PNAME_NS)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(FULLIRI)) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(LONG_STRING)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) return true;
    }
    return false;
  }

  private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(PNAME_LN)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(DOUBLE_CARET)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_scan_token(DIGIT)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(NAME_OBJECT)) return true;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(LANG)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(L_IDENT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public DLGP2ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[52];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public DLGP2Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DLGP2Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DLGP2ParserTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public DLGP2Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new DLGP2ParserTokenManager(this, jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public DLGP2Parser(DLGP2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(DLGP2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 52; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
